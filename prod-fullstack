#!/bin/bash

# Full-stack production server for byNolo site
# Runs both frontend (static) and backend (Flask API) in production mode

set -e

# Handle stop command
if [ "$1" = "stop" ]; then
    echo "🛑 Stopping full-stack production server..."
    tmux kill-session -t bynolo-prod-backend 2>/dev/null || true
    pkill -f "serve.*dist" 2>/dev/null || true
    echo "✅ Production servers stopped"
    exit 0
fi

FRONTEND_PORT=${1:-8080}
BACKEND_PORT=${2:-5000}

echo "🚀 Starting byNolo full-stack production server..."

# Build frontend if needed
if [ ! -d "dist" ] || [ "src" -nt "dist" ]; then
    echo "📦 Building frontend..."
    npm run build
fi

# Check if serve is available for frontend
if ! command -v serve &> /dev/null; then
    echo "📦 Installing serve..."
    npm install -g serve
fi

# Setup backend environment
echo "🔧 Setting up backend..."
cd api

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "🐍 Creating virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment and install dependencies
source venv/bin/activate

if [ -f "requirements.txt" ] && [ -s "requirements.txt" ]; then
    echo "📦 Installing Python dependencies..."
    pip install -r requirements.txt
fi

cd ..

# Start backend in background using tmux with gunicorn
echo "🔧 Starting backend server (port $BACKEND_PORT)..."
tmux new-session -d -s bynolo-prod-backend -c "$(pwd)/api" "source venv/bin/activate && gunicorn -c gunicorn.conf.py wsgi:application" 2>/dev/null || {
    echo "⚠️  Backend session exists, killing and restarting..."
    tmux kill-session -t bynolo-prod-backend 2>/dev/null || true
    sleep 1
    tmux new-session -d -s bynolo-prod-backend -c "$(pwd)/api" "source venv/bin/activate && gunicorn -c gunicorn.conf.py wsgi:application"
}

# Wait a moment for backend to start
sleep 3

# Check if backend is running
if lsof -i :$BACKEND_PORT >/dev/null 2>&1; then
    echo "✅ Backend running on port $BACKEND_PORT"
else
    echo "❌ Backend failed to start"
    exit 1
fi

echo "✅ Starting frontend server (port $FRONTEND_PORT)"
echo ""
echo "🌐 Frontend: http://localhost:$FRONTEND_PORT"
echo "🔧 Backend:  http://localhost:$BACKEND_PORT"
echo "📋 API Base:  http://localhost:$BACKEND_PORT/api"
echo ""
echo "📋 For Cloudflare Tunnel:"
echo "   Frontend: cloudflared tunnel --url http://localhost:$FRONTEND_PORT"
echo "   Full-stack: Use nginx proxy or expose both ports"
echo ""
echo "🛑 To stop: ./prod-fullstack stop"
echo ""

# Start frontend server (this will block)
serve -s dist -l $FRONTEND_PORT
